---
import EditorLayout from "@/layouts/editor.astro";
---

<EditorLayout>
<div id="app" class="container mx-auto px-4 max-w-6xl">
  <!-- Add link dialog -->
  <div id="link-dialog" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
    <div class="bg-white rounded-lg p-6 w-full max-w-md">
      <h3 class="text-lg font-medium mb-4">Insert Link</h3>
      <div class="space-y-4">
        <div>
          <label for="link-text" class="block text-sm font-medium text-gray-700 mb-1">Link Text</label>
          <input type="text" id="link-text" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Text to display" />
        </div>
        <div>
          <label for="link-url" class="block text-sm font-medium text-gray-700 mb-1">URL</label>
          <input type="text" id="link-url" class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="https://example.com" />
        </div>
        <div class="flex justify-end gap-2">
          <button id="link-cancel" class="px-4 py-2 text-gray-700 bg-gray-100 rounded hover:bg-gray-200">Cancel</button>
          <button id="link-insert" class="px-4 py-2 text-white bg-blue-600 rounded hover:bg-blue-700">Insert</button>
        </div>
      </div>
    </div>
  </div>
  <h1 class="text-2xl font-bold mb-4 text-center">ðŸ”’ Private Blog Publisher</h1>
  <div id="password-section">
    <label for="password" class="block text-sm font-medium text-gray-700 mb-2">Enter Password</label>
    <input type="password" id="password" class="w-full px-3 py-2 border border-gray-300 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500" />
    <button id="unlock-btn" class="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition">Unlock</button>
    <p id="error-msg" class="text-red-500 text-sm mt-2 hidden">Incorrect password. Try again.</p>
  </div>
  <div id="editor-section" class="hidden">
    <form id="post-form" class="space-y-4">
      <div>
        <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
        <input type="text" id="title" name="title" required class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" />
      </div>
      <div>
        <label for="date" class="block text-sm font-medium text-gray-700">Date</label>
        <input type="date" id="date" name="date" required class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" />
      </div>
      <div>
        <label for="excerpt" class="block text-sm font-medium text-gray-700">Excerpt</label>
        <textarea id="excerpt" name="excerpt" rows="2" required class="w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"></textarea>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Body</label>
        <div class="flex flex-wrap gap-2 mb-2">
          <button type="button" class="format-btn px-2 py-1 rounded bg-gray-200 hover:bg-gray-300" data-cmd="h1" title="Heading 1">H1</button>
          <button type="button" class="format-btn px-2 py-1 rounded bg-gray-200 hover:bg-gray-300" data-cmd="h2" title="Heading 2">H2</button>
          <button type="button" class="format-btn px-2 py-1 rounded bg-gray-200 hover:bg-gray-300" data-cmd="h3" title="Heading 3">H3</button>
          <button type="button" class="format-btn px-2 py-1 rounded bg-gray-200 hover:bg-gray-300" data-cmd="bold" title="Bold"><b>B</b></button>
          <button type="button" class="format-btn px-2 py-1 rounded bg-gray-200 hover:bg-gray-300" data-cmd="italic" title="Italic"><i>I</i></button>
          <button type="button" class="format-btn px-2 py-1 rounded bg-gray-200 hover:bg-gray-300" data-cmd="insertUnorderedList" title="Bullet List">â€¢ List</button>
          <button type="button" class="format-btn px-2 py-1 rounded bg-gray-200 hover:bg-gray-300" data-cmd="createLink" title="Link">ðŸ”—</button>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Rich Text Editor</label>
            <div id="editor" contenteditable="true" class="prose prose-sm w-full min-h-[200px] md:min-h-[300px] border border-gray-300 rounded p-2 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-gray-50 overflow-auto">
              <p></p>
            </div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Raw Markdown</label>
            <textarea id="markdown-view" class="w-full min-h-[200px] md:min-h-[300px] border border-gray-300 rounded p-2 bg-gray-50 font-mono text-sm focus:outline-none focus:ring-2 focus:ring-blue-500" spellcheck="false"></textarea>
          </div>
        </div>
      </div>
      <div id="preview-loading" class="text-sm text-gray-500 mb-2 hidden">Loading preview...</div>
      <div id="preview-error" class="text-sm text-red-500 mb-2 hidden">Error: Preview libraries not loaded. Please refresh the page.</div>
      <button type="submit" class="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700 transition">Publish</button>
      <p id="submit-msg" class="text-center text-green-600 text-sm mt-2 hidden">Post submitted!</p>
    </form>
  </div>
</div>

<style is:inline>
  /* Editor styles */
  #editor {
    font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
  }
  #editor h1 { font-size: 1.5em; font-weight: bold; margin: 0.5em 0; }
  #editor h2 { font-size: 1.3em; font-weight: bold; margin: 0.5em 0; }
  #editor h3 { font-size: 1.1em; font-weight: bold; margin: 0.5em 0; }
  #editor ul { list-style-type: disc; margin-left: 1.5em; }
  #editor ol { list-style-type: decimal; margin-left: 1.5em; }
  #editor p { margin: 0.5em 0; }
  #editor a { color: #2563eb; text-decoration: underline; }
  #editor blockquote { border-left: 3px solid #d1d5db; padding-left: 1em; margin: 0.5em 0; color: #4b5563; }
  #editor code { font-family: ui-monospace, monospace; background-color: #f3f4f6; padding: 0.2em 0.4em; border-radius: 0.2em; }
  #editor pre { background-color: #f3f4f6; padding: 1em; border-radius: 0.3em; overflow-x: auto; }
  #editor img { max-width: 100%; height: auto; }
  #editor table { border-collapse: collapse; width: 100%; margin: 0.5em 0; }
  #editor th, #editor td { border: 1px solid #d1d5db; padding: 0.5em; }
  #editor th { background-color: #f3f4f6; }
</style>

<script is:inline src="https://cdn.jsdelivr.net/npm/turndown/dist/turndown.min.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script is:inline>
  // Global variables
  let editorReady = false;
  let isUpdatingMarkdown = false;
  let selectedRange = null;
  let authToken = sessionStorage.getItem('blog_auth_token');
  const previewLoading = document.getElementById('preview-loading');
  const previewError = document.getElementById('preview-error');
  const editor = document.getElementById('editor');
  const markdownView = document.getElementById('markdown-view');
  const postForm = document.getElementById('post-form');
  const submitMsg = document.getElementById('submit-msg');
  const formatBtns = document.querySelectorAll('.format-btn');
  const dateInput = document.getElementById('date');
  const linkDialog = document.getElementById('link-dialog');
  const linkText = document.getElementById('link-text');
  const linkUrl = document.getElementById('link-url');
  const linkInsert = document.getElementById('link-insert');
  const linkCancel = document.getElementById('link-cancel');

  // Initialize Marked options
  marked.setOptions({
    breaks: true,  // Enable line breaks
    gfm: true,     // Enable GitHub Flavored Markdown
  });

  // Initialize Turndown service
  let turndownService;
  
  // Update rich text editor from markdown
  function updateRichText() {
    if (!editor || !markdownView || !editorReady || isUpdatingMarkdown) return;
    
    try {
      isUpdatingMarkdown = true;
      const markdown = markdownView.value || '';
      
      // Ensure proper line breaks in markdown
      const processedMarkdown = markdown
        .split('\n')
        .map(line => line.trim())
        .join('\n\n');
      
      const html = marked.parse(processedMarkdown);
      editor.innerHTML = html;
      
      // Hide loading/error states
      if (previewLoading) previewLoading.classList.add('hidden');
      if (previewError) previewError.classList.add('hidden');
    } catch (err) {
      console.error('Error updating rich text:', err);
      if (previewError) previewError.classList.remove('hidden');
    } finally {
      isUpdatingMarkdown = false;
    }
  }

  // Handle markdown editor key events
  function handleMarkdownKeydown(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      
      // Get cursor position
      const pos = markdownView.selectionStart;
      const content = markdownView.value || '';
      
      // Insert two newlines at cursor position
      const newContent = content.slice(0, pos) + '\n\n' + content.slice(pos);
      markdownView.value = newContent;
      
      // Move cursor after the newlines
      markdownView.selectionStart = markdownView.selectionEnd = pos + 2;
      
      updateRichText();
    }
  }

  // Update markdown from rich text
  function updateMarkdown() {
    if (!editor || !markdownView || !editorReady || !turndownService || isUpdatingMarkdown) return;

    try {
      isUpdatingMarkdown = true;
      const html = editor.innerHTML;
      let markdown = turndownService.turndown(html);
      
      // Ensure proper line breaks
      markdown = markdown
        .split('\n')
        .map(line => line.trim())
        .filter(line => line) // Remove empty lines
        .join('\n\n');
      
      // Update markdown view
      markdownView.value = markdown;
      
      // Hide loading/error states
      if (previewLoading) previewLoading.classList.add('hidden');
      if (previewError) previewError.classList.add('hidden');
    } catch (err) {
      console.error('Error updating markdown:', err);
      if (previewError) previewError.classList.remove('hidden');
    } finally {
      isUpdatingMarkdown = false;
    }
  }

  // Check if libraries are loaded
  function checkLibraries() {
    if (typeof window.TurndownService === 'undefined' || typeof window.marked === 'undefined') {
      console.error('Required libraries not loaded');
      previewError?.classList.remove('hidden');
      previewLoading?.classList.add('hidden');
      return false;
    }
    return true;
  }

  // Handle link dialog
  function showLinkDialog() {
    if (!editor) return;
    
    // Store current selection
    const selection = window.getSelection();
    if (selection.rangeCount > 0) {
      selectedRange = selection.getRangeAt(0);
      // Pre-fill link text with selection if any
      if (linkText) {
        linkText.value = selectedRange.toString();
      }
    }

    if (linkDialog) {
      linkDialog.classList.remove('hidden');
      // Focus URL field if we have text selected, otherwise focus text field
      if (linkText && linkUrl) {
        if (linkText.value) {
          linkUrl.focus();
        } else {
          linkText.focus();
        }
      }
    }
  }

  function hideLinkDialog() {
    if (linkDialog) {
      linkDialog.classList.add('hidden');
      if (linkText) linkText.value = '';
      if (linkUrl) linkUrl.value = '';
    }
  }

  function insertLink() {
    if (!editor || !linkText || !linkUrl) return;
    
    const text = linkText.value.trim();
    const url = linkUrl.value.trim();
    
    if (!url) {
      alert('Please enter a URL');
      return;
    }

    // If no text provided, use the URL as text
    const displayText = text || url;

    // Create the link
    const link = document.createElement('a');
    link.href = url.startsWith('http') ? url : `https://${url}`;
    link.textContent = displayText;

    // Insert at selection if exists, otherwise at end of editor
    if (selectedRange) {
      selectedRange.deleteContents();
      selectedRange.insertNode(link);
    } else {
      editor.appendChild(link);
    }

    // Hide dialog and update markdown
    hideLinkDialog();
    updateMarkdown();
    editor.focus();
  }

  // Initialize link dialog handlers
  if (linkDialog && linkInsert && linkCancel) {
    linkCancel.addEventListener('click', () => {
      hideLinkDialog();
      editor.focus();
    });

    linkInsert.addEventListener('click', insertLink);

    // Handle Enter key in inputs
    [linkText, linkUrl].forEach(input => {
      if (input) {
        input.addEventListener('keydown', (e) => {
          if (e.key === 'Enter') {
            e.preventDefault();
            insertLink();
          } else if (e.key === 'Escape') {
            hideLinkDialog();
            editor.focus();
          }
        });
      }
    });
  }

  // Initialize password protection
  function initializePasswordProtection() {
    const unlockBtn = document.getElementById('unlock-btn');
    const passwordInput = document.getElementById('password');
    const errorMsg = document.getElementById('error-msg');
    const passwordSection = document.getElementById('password-section');
    const editorSection = document.getElementById('editor-section');

    if (!unlockBtn || !passwordInput || !errorMsg || !passwordSection || !editorSection) {
      console.error('Missing required password elements');
      return;
    }

    // Check if already authenticated
    if (authToken) {
      passwordSection.classList.add('hidden');
      editorSection.classList.remove('hidden');
      editorReady = true;
      updateMarkdown();
      return;
    }

    // Handle unlock button click
    unlockBtn.addEventListener('click', async () => {
      const password = passwordInput instanceof HTMLInputElement ? passwordInput.value : '';
      
      try {
        // Test the password with a dummy post
        const response = await fetch('/publish-post', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            password,
            title: '',
            date: '',
            excerpt: '',
            markdown: ''
          })
        });

        if (response.ok) {
          // Store auth token in session storage
          sessionStorage.setItem('blog_auth_token', password);
          authToken = password;
          
          // Show editor
          passwordSection.classList.add('hidden');
          editorSection.classList.remove('hidden');
          editorReady = true;
          updateMarkdown();
        } else {
          errorMsg.classList.remove('hidden');
        }
      } catch (err) {
        console.error('Error validating password:', err);
        errorMsg.textContent = 'Error validating password. Please try again.';
        errorMsg.classList.remove('hidden');
      }
    });

    // Handle Enter key
    passwordInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        unlockBtn.click();
      }
    });
  }

  document.addEventListener('DOMContentLoaded', function () {
    if (!checkLibraries()) {
      console.error('Libraries not loaded, aborting initialization');
      return;
    }

    // Initialize Turndown with specific settings
    turndownService = new window.TurndownService({ 
      headingStyle: 'atx',
      codeBlockStyle: 'fenced',
      br: '\n', // Use double line breaks
      blankReplacement: function(content, node) {
        return node.isBlock ? '\n\n' : '';
      }
    });

    turndownService.addRule('strikethrough', {
      filter: ['del', 's', 'strike'],
      replacement: function(content) {
        return '~~' + content + '~~';
      }
    });

    // Initialize password protection
    initializePasswordProtection();

    // Show loading state
    if (previewLoading) previewLoading.classList.remove('hidden');

    // Autofill date
    if (dateInput && dateInput instanceof HTMLInputElement) {
      const today = new Date().toISOString().slice(0, 10);
      dateInput.value = today;
    }

    // Setup markdown editor
    if (markdownView) {
      markdownView.addEventListener('input', updateRichText);
      markdownView.addEventListener('blur', updateRichText);
      
      // Handle tab key for indentation
      markdownView.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          e.preventDefault();
          const start = markdownView.selectionStart;
          const end = markdownView.selectionEnd;
          markdownView.value = markdownView.value.substring(0, start) + '  ' + markdownView.value.substring(end);
          markdownView.selectionStart = markdownView.selectionEnd = start + 2;
        }
      });
    }

    // Formatting buttons
    formatBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const cmd = btn.getAttribute('data-cmd');
        if (!editor || !editorReady) return;
        
        try {
          if (cmd === 'createLink') {
            showLinkDialog();
          } else if (cmd === 'h1' || cmd === 'h2' || cmd === 'h3') {
            document.execCommand('formatBlock', false, cmd.toUpperCase());
          } else {
            document.execCommand(cmd, false, undefined);
          }
          editor.focus();
          updateMarkdown();
        } catch (err) {
          console.error('Error applying format:', err);
        }
      });
    });

    // Editor input handlers
    if (editor) {
      editor.addEventListener('input', updateMarkdown);
      editor.addEventListener('blur', updateMarkdown);
    }

    // Publish handler
    if (postForm) {
      postForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!submitMsg || !editor || !checkLibraries() || !authToken) return;

        try {
          // Gather data
          const titleInput = document.getElementById('title');
          const dateInput = document.getElementById('date');
          const excerptInput = document.getElementById('excerpt');
          const title = titleInput instanceof HTMLInputElement ? titleInput.value : '';
          const date = dateInput instanceof HTMLInputElement ? dateInput.value : '';
          const excerpt = excerptInput instanceof HTMLTextAreaElement ? excerptInput.value : '';
          const markdown = markdownView.value || '';

          // Send to API endpoint
          const response = await fetch('/publish-post', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              password: authToken,
              title,
              date,
              excerpt,
              markdown
            })
          });

          if (!response.ok) {
            throw new Error('Failed to publish post');
          }

          const result = await response.json();
          
          submitMsg.textContent = result.message || 'Post published successfully!';
          submitMsg.classList.remove('hidden', 'text-red-500');
          submitMsg.classList.add('text-green-500');
          setTimeout(() => submitMsg.classList.add('hidden'), 3000);
          
          if (postForm instanceof HTMLFormElement) postForm.reset();
          editor.innerHTML = '';
          markdownView.value = '';
          updateMarkdown();
        } catch (err) {
          console.error('Error submitting post:', err);
          submitMsg.textContent = 'Error publishing post. Please try again.';
          submitMsg.classList.remove('hidden');
          submitMsg.classList.add('text-red-500');
          submitMsg.classList.remove('text-green-500');
        }
      });
    }
  });
</script>
</EditorLayout>